import asyncio
import logging
import aiosqlite
from datetime import timedelta
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, ChatPermissions
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = "YOUR_BOT_TOKEN"
OWNER_ID = 7322925570
DB_PATH = "bot.db"
LOG_FILE = "violations.log"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher()

# === FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ===
class AdminStates(StatesGroup):
    add_chat = State()
    del_chat = State()
    add_word = State()
    del_word = State()
    add_link = State()
    del_link = State()
    add_immunity_chat = State()
    add_immunity_user = State()
    del_immunity_chat = State()
    del_immunity_user = State()
    unmute_chat = State()
    unmute_user = State()

# === –ë–ê–ó–ê ===
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("CREATE TABLE IF NOT EXISTS admins (id INTEGER PRIMARY KEY)")
        await db.execute("CREATE TABLE IF NOT EXISTS chats (chat_id INTEGER PRIMARY KEY)")
        await db.execute("CREATE TABLE IF NOT EXISTS bad_words (chat_id INTEGER, word TEXT, PRIMARY KEY(chat_id, word))")
        await db.execute("CREATE TABLE IF NOT EXISTS allowed_links (chat_id INTEGER, link TEXT, PRIMARY KEY(chat_id, link))")
        await db.execute("""CREATE TABLE IF NOT EXISTS settings (
                                chat_id INTEGER PRIMARY KEY,
                                mute_enabled INTEGER DEFAULT 1,
                                ban_enabled INTEGER DEFAULT 1,
                                bot_enabled INTEGER DEFAULT 1
                            )""")
        await db.execute("CREATE TABLE IF NOT EXISTS immunity (chat_id INTEGER, user_id INTEGER, PRIMARY KEY(chat_id, user_id))")
        await db.commit()

# === –•–ï–õ–ü–ï–†–´ ===
def get_display_name(user) -> str:
    return f"@{user.username}" if user.username else f"id={user.id}"

async def is_admin(user_id: int) -> bool:
    if user_id == OWNER_ID:
        return True
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT 1 FROM admins WHERE id=?", (user_id,)) as cur:
            return await cur.fetchone() is not None

async def log_violation(text: str):
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(text + "\n")

# === –ö–û–ú–ê–ù–î–´ ===
@dp.message(F.text == "/dante")
async def cmd_dante(message: Message):
    text = (
        "üìú <b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:</b>\n\n"
        "üõ† <b>–ê–¥–º–∏–Ω—Å–∫–∏–µ:</b>\n"
        "/admin ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (—Ç–æ–ª—å–∫–æ –≤ –õ–°)\n"
        "/onbot ‚Äî –≤–∫–ª—é—á–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞\n"
        "/offbot ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞\n"
        "/unmute ‚Äî —Å–Ω—è—Ç—å –º—É—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –≤ –õ–°)\n"
        "/checkid ‚Äî —É–∑–Ω–∞—Ç—å Chat ID –∏ Topic ID\n\n"
        "‚ö°Ô∏è <b>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:</b>\n"
        "‚Ä¢ –ê–≤—Ç–æ-–º—É—Ç –Ω–∞ 10 –º–∏–Ω—É—Ç –∑–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞\n"
        "‚Ä¢ –ê–≤—Ç–æ-–±–∞–Ω –∑–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏\n"
        "‚Ä¢ –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å\n"
        "‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –º–æ–∂–Ω–æ –≤—ã–¥–∞–≤–∞—Ç—å –∏–º–º—É–Ω–∏—Ç–µ—Ç\n"
        "‚Ä¢ –õ–æ–≥–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π (—Å–∫–∞—á–∞—Ç—å/–æ—á–∏—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É)\n\n"
        "üëë –£–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç–æ–º –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –æ–≤–Ω–µ—Ä –∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∞–¥–º–∏–Ω—ã."
    )
    await message.answer(text)

@dp.message(F.text == "/checkid")
async def cmd_checkid(message: Message):
    await message.answer(
        f"Chat ID: <code>{message.chat.id}</code>\n"
        f"Topic ID: <code>{message.message_thread_id}</code>"
    )

@dp.message(F.text == "/onbot")
async def cmd_onbot(message: Message):
    if not await is_admin(message.from_user.id): return
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE settings SET bot_enabled=1")
        await db.commit()
    await message.answer("‚úÖ –ë–æ—Ç –≤–∫–ª—é—á—ë–Ω –∏ —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç.")

@dp.message(F.text == "/offbot")
async def cmd_offbot(message: Message):
    if not await is_admin(message.from_user.id): return
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE settings SET bot_enabled=0")
        await db.commit()
    await message.answer("‚õî –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω.")

# === –ê–ù–¢–ò-–°–ü–ê–ú –§–ò–õ–¨–¢–† ===
@dp.message()
async def filter_messages(message: Message):
    if message.chat.type == "private":
        return

    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT bot_enabled FROM settings WHERE chat_id=?", (message.chat.id,)) as cur:
            row = await cur.fetchone()
            if row is not None and row[0] == 0:
                return

        # –∏–º–º—É–Ω–∏—Ç–µ—Ç
        async with db.execute("SELECT 1 FROM immunity WHERE chat_id=? AND user_id=?", (message.chat.id, message.from_user.id)) as cur:
            if await cur.fetchone():
                return

        # –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
        async with db.execute("SELECT word FROM bad_words WHERE chat_id=?", (message.chat.id,)) as cur:
            bad_words = [r[0] for r in await cur.fetchall()]

        # —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
        async with db.execute("SELECT link FROM allowed_links WHERE chat_id=?", (message.chat.id,)) as cur:
            allowed_links = [r[0] for r in await cur.fetchall()]

        async with db.execute("SELECT mute_enabled, ban_enabled FROM settings WHERE chat_id=?", (message.chat.id,)) as cur:
            row = await cur.fetchone()
            mute_enabled, ban_enabled = (1, 1) if not row else row

    text = message.text.lower() if message.text else ""

    # –º—É—Ç –∑–∞ —Å–ª–æ–≤–æ
    if mute_enabled:
        for word in bad_words:
            if word in text.split():
                await message.delete()
                await bot.restrict_chat_member(
                    chat_id=message.chat.id,
                    user_id=message.from_user.id,
                    permissions=ChatPermissions(can_send_messages=False),
                    until_date=timedelta(minutes=10)
                )
                warn = f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_display_name(message.from_user)} –Ω–∞–ø–∏—Å–∞–ª –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –∏ –ø–æ–ª—É—á–∏–ª –º—É—Ç –Ω–∞ 10 –º–∏–Ω—É—Ç."
                await bot.send_message(message.chat.id, warn, message_thread_id=message.message_thread_id)
                await log_violation(warn)
                return

    # –±–∞–Ω –∑–∞ —Å—Å—ã–ª–∫—É
    if ban_enabled and ("http://" in text or "https://" in text):
        if not any(allowed in text for allowed in allowed_links):
            await message.delete()
            await bot.ban_chat_member(message.chat.id, message.from_user.id)
            warn = f"‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_display_name(message.from_user)} –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –∏ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω."
            await bot.send_message(message.chat.id, warn, message_thread_id=message.message_thread_id)
            await log_violation(warn)
            return

# === –°–¢–ê–†–¢ ===
async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
